import accountBalancesAbi from './contracts/accountBalancesAbi.json'
import { numberFromBig } from '../chain/numbers';
import { callContractWithStateOverride } from "../chain/contract"
import { getRPC } from "../chain/rpc"

export async function getAccountBalances(networks, account){
    const accountBalancesContractByteCode = "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80637851a7d914610030575b600080fd5b61004a60048036038101906100459190610507565b610060565b60405161005791906106d5565b60405180910390f35b6100686102ae565b838160000181815250508273ffffffffffffffffffffffffffffffffffffffff1631816020018181525050815167ffffffffffffffff8111156100ae576100ad6103c4565b5b6040519080825280602002602001820160405280156100e757816020015b6100d46102cf565b8152602001906001900390816100cc5790505b50816040018190525060005b82518160ff1610156102a6576040518060600160405280848360ff16815181106101205761011f6106f7565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168152602001848360ff1681518110610159576101586106f7565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231876040518263ffffffff1660e01b81526004016101999190610735565b602060405180830381865afa1580156101b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101da9190610765565b8152602001848360ff16815181106101f5576101f46106f7565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610247573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026b9190610765565b81525082604001518260ff1681518110610288576102876106f7565b5b6020026020010181905250808061029e906107ce565b9150506100f3565b509392505050565b60405180606001604052806000815260200160008152602001606081525090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61032d8161031a565b811461033857600080fd5b50565b60008135905061034a81610324565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061037b82610350565b9050919050565b61038b81610370565b811461039657600080fd5b50565b6000813590506103a881610382565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103fc826103b3565b810181811067ffffffffffffffff8211171561041b5761041a6103c4565b5b80604052505050565b600061042e610306565b905061043a82826103f3565b919050565b600067ffffffffffffffff82111561045a576104596103c4565b5b602082029050602081019050919050565b600080fd5b600061048361047e8461043f565b610424565b905080838252602082019050602084028301858111156104a6576104a561046b565b5b835b818110156104cf57806104bb8882610399565b8452602084019350506020810190506104a8565b5050509392505050565b600082601f8301126104ee576104ed6103ae565b5b81356104fe848260208601610470565b91505092915050565b6000806000606084860312156105205761051f610310565b5b600061052e8682870161033b565b935050602061053f86828701610399565b925050604084013567ffffffffffffffff8111156105605761055f610315565b5b61056c868287016104d9565b9150509250925092565b61057f8161031a565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6105ba81610370565b82525050565b6060820160008201516105d660008501826105b1565b5060208201516105e96020850182610576565b5060408201516105fc6040850182610576565b50505050565b600061060e83836105c0565b60608301905092915050565b6000602082019050919050565b600061063282610585565b61063c8185610590565b9350610647836105a1565b8060005b8381101561067857815161065f8882610602565b975061066a8361061a565b92505060018101905061064b565b5085935050505092915050565b600060608301600083015161069d6000860182610576565b5060208301516106b06020860182610576565b50604083015184820360408601526106c88282610627565b9150508091505092915050565b600060208201905081810360008301526106ef8184610685565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b61072f81610370565b82525050565b600060208201905061074a6000830184610726565b92915050565b60008151905061075f81610324565b92915050565b60006020828403121561077b5761077a610310565b5b600061078984828501610750565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff82169050919050565b60006107d9826107c1565b915060ff82036107ec576107eb610792565b5b60018201905091905056fea2646970667358221220243b283acd1887fcac37c89e763c88d69820734aa66653509732fca9acffee3b64736f6c63430008180033";
    const accountBalancesContractAddress = "0xe50fa9b3c56ffb159cb0fca61f5c9d750e8128c8";
    const stateOverride = {}

    stateOverride[accountBalancesContractAddress] = { code: accountBalancesContractByteCode }

    const calls = networks.map(network => {
        const tokens = network.tokens.map(token => { return token.address });
        const rpc = getRPC(network.chainId);

        return callContractWithStateOverride(rpc, 
            accountBalancesAbi, 
            accountBalancesContractAddress, 
            "getAccountBalances", 
            stateOverride,  
            network.chainId, 
            account, 
            tokens)
    });

    const responses = await Promise.all(calls);
    const balancesByNetworkLookup = {}

    responses.forEach(network => {
        balancesByNetworkLookup[network.chainId.toString()] = { native: numberFromBig(network.nativeBalance, 18) }

        network.tokens.forEach(token => {
            const decimals = numberFromBig(token.decimals, 0);

            balancesByNetworkLookup[network.chainId.toString()][token.addr.toLowerCase()] = numberFromBig(token.balance, decimals)
        })
    })

    return balancesByNetworkLookup;
}